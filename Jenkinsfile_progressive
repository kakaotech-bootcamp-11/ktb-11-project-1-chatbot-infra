pipeline {
    agent any
    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: '빌드할 Git 브랜치')
        string(name: 'JENKINS_NAMESPACE', defaultValue: 'jenkins', description: 'Jenkins가 실행 중인 네임스페이스')
        string(name: 'KANIKO_JOB_NAME', defaultValue: 'kaniko-build-job', description: 'Kaniko Job의 이름')
        string(name: 'DEPLOYMENT_NAMESPACE', defaultValue: 'default', description: '배포의 네임스페이스')
        string(name: 'DEPLOYMENT_NAME', defaultValue: 'my-app', description: 'Kubernetes 배포의 이름')
        string(name: 'DEPLOYMENT_CONTAINER_NAME', defaultValue: 'my-app-container', description: '배포 내 컨테이너의 이름')
    }
    environment {
        DOCKER_REPO = "${Docker.UserName}/${registryName}"
        DOCKER_IMAGE_TAG = '' // 파이프라인 중에 설정됩니다.
    }
    stages {
        stage('소스 코드 체크아웃') {
            steps {
                // Git 소스 코드 체크아웃
                checkout([$class: 'GitSCM', branches: [[name: "${params.GIT_BRANCH}"]], userRemoteConfigs: scm.userRemoteConfigs])
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.DOCKER_IMAGE_TAG = "${env.GIT_COMMIT_SHORT}"
                    echo "현재 Git 커밋: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        stage('Kaniko Job YAML 생성') {
            steps {
                script {
                    // Kaniko Job YAML을 동적으로 생성
                    env.KANIKO_JOB_YAML = "${env.WORKSPACE}/kaniko-job.yaml"
                    writeFile file: env.KANIKO_JOB_YAML, text: """
apiVersion: batch/v1
kind: Job
metadata:
  name: ${params.KANIKO_JOB_NAME}
spec:
  ttlSecondsAfterFinished: 30
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:latest
        args:
          - --context=git://$(GIT_REPO_URL)#${params.GIT_BRANCH}
          - --dockerfile=Dockerfile
          - --destination=docker.io/${env.DOCKER_REPO}:${env.DOCKER_IMAGE_TAG}
        env:
          - name: GIT_REPO_URL
            value: "$(git config --get remote.origin.url)"
        volumeMounts:
          - name: docker-config
            mountPath: /kaniko/.docker
      volumes:
        - name: docker-config
          secret:
            secretName: regcred
"""
                }
            }
        }
        stage('Kaniko Job 배포') {
            steps {
                script {
                    // 기존 Kaniko Job 삭제 후 새로운 Job 배포
                    sh """
                    kubectl delete job ${params.KANIKO_JOB_NAME} -n ${params.JENKINS_NAMESPACE} --ignore-not-found
                    kubectl apply -f ${env.KANIKO_JOB_YAML} -n ${params.JENKINS_NAMESPACE}
                    """
                }
            }
        }
        stage('Kaniko 빌드 대기') {
            steps {
                script {
                    // Kaniko Job 완료까지 대기
                    sh """
                    kubectl wait --for=condition=complete job/${params.KANIKO_JOB_NAME} -n ${params.JENKINS_NAMESPACE} --timeout=900s
                    """
                    // Job 성공 여부 확인
                    def jobStatus = sh(script: "kubectl get job ${params.KANIKO_JOB_NAME} -n ${params.JENKINS_NAMESPACE} -o jsonpath='{.status.succeeded}'", returnStdout: true).trim()
                    if (jobStatus != '1') {
                        error "Kaniko 빌드 실패."
                    }
                }
            }
        }
        stage('Kubernetes에 배포') {
            steps {
                script {
                    // 새로운 이미지를 Kubernetes에 배포
                    sh """
                    kubectl set image deployment/${params.DEPLOYMENT_NAME} \
                    -n ${params.DEPLOYMENT_NAMESPACE} ${params.DEPLOYMENT_CONTAINER_NAME}=docker.io/${env.DOCKER_REPO}:${env.DOCKER_IMAGE_TAG}
                    kubectl rollout status deployment/${params.DEPLOYMENT_NAME} -n ${params.DEPLOYMENT_NAMESPACE}
                    """
                }
            }
        }
    }
    post {
        success {
            echo '빌드 및 배포 성공!'
            withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                discordSend title: "${env.JOB_NAME} : ${env.GIT_COMMIT_SHORT}",
                            description: "Build #${env.BUILD_NUMBER} 성공 ✅",
                            webhookURL: DISCORD
            }
        }
        failure {
            echo '빌드 또는 배포 실패. 로그를 확인하세요.'
            withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                discordSend title: "${env.JOB_NAME} : ${env.GIT_COMMIT_SHORT}",
                            description: "Build #${env.BUILD_NUMBER} 실패 ❌",
                            webhookURL: DISCORD
            }
        }
        cleanup {
            script {
                // Kaniko Job 정리
                sh "kubectl delete job ${params.KANIKO_JOB_NAME} -n ${params.JENKINS_NAMESPACE} --ignore-not-found"
            }
        }
    }
}
